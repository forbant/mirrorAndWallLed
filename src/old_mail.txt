
}

// #include <Arduino.h>
// #include <ESP8266WiFi.h>
// #include <WiFiClient.h>
// #include <ESP8266WebServer.h>
// #include <DNSServer.h>
// #include <FastLED.h>
// #include <EEPROM.h>

// #define APSSID "ESPap"
// #define APPSK "thereisnospoon"

// #define PIN_WALL 13
// #define PIN_MIRROR 14
// // Inputs
// #define PIN_COLOR_CHANGE_BUTTON 5

// #define NUM_LEDS_WALL 146
// #define NUM_LEDS_MIRROR 330

// // Debug flag
// #define DEBUG 1

// #if DEBUG
//   #define DEBUG_PRINT(x) Serial.println(F(x))
//   #define DEBUG_PRINT_VAL(x, y) do { Serial.print(F(x)); Serial.println(y); } while(0)
// #else
//   #define DEBUG_PRINT(x)
//   #define DEBUG_PRINT_VAL(x, y)
// #endif

// // Constants
// const unsigned long LONG_PRESS_TIME = 1500;
// const unsigned long TICK_TIME = 10;
// const uint8_t MAX_HUE = 255;
// const uint8_t MAX_SATURATION = 255;
// const uint8_t MAX_VALUE = 255;
// const uint8_t INITIAL_BRIGHTNESS = 255;
// const unsigned long DEBOUNCE_DELAY = 5;

// // EEPROM addresses
// const int EEPROM_HUE = 0;
// const int EEPROM_SATURATION = 1;
// const int EEPROM_VALUE = 2;
// const int EEPROM_STATE = 3;
// const int EEPROM_INITIALIZED = 4;
// const uint8_t EEPROM_INIT_VALUE = 43;  // Any arbitrary value

// // Variables
// bool colorChangeButtonFlag = false;
// bool longPressDetected = false;
// unsigned long buttonPushTime = 0;
// unsigned long lastDebounceTime = 0;
// uint8_t hue = 0;
// uint8_t saturation = MAX_SATURATION;
// uint8_t value = MAX_VALUE;

// // State management
// enum LedState { MIRROR_ONLY, BOTH, WALL_ONLY };
// LedState state = BOTH;

// // WiFi AP
// const char *ssid = APSSID;
// const char *password = APPSK;

// ESP8266WebServer server(80);
// DNSServer dnsServer;

// CRGB leds_wall[NUM_LEDS_WALL];
// CRGB leds_mirror[NUM_LEDS_MIRROR];

// // Functions
// void handleState();
// void fillStrip(CRGB* strip, int numberOfLeds, CRGB color);

// const char html[] PROGMEM = R"rawliteral(
// <!DOCTYPE html>
// <html lang="en">
// <head>
//     <meta charset="UTF-8">
//     <meta name="viewport" content="width=device-width, initial-scale=1.0">
//     <title>LED Control</title>
//     <style>
//         body {
//             font-family: 'Arial', sans-serif;
//             background: linear-gradient(135deg, #fc8ec5, #439ffa);
//             margin: 0;
//             padding: 0;
//             display: flex;
//             justify-content: center;
//             align-items: flex-start;
//             height: 100vh;
//         }
//         .container {
//             background: white;
//             border-radius: 10px;
//             padding: 20px;
//             box-shadow: 0 4px 20px rgba(0, 0, 0, 0.2);
//             width: 350px;
//             text-align: center;
//             margin: 30px;
//         }
//         h1 {
//             margin-bottom: 20px;
//             color: #333;
//         }
//         .strip {
//             background: #f3eefc;
//             box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
//             display: flex;
//             justify-content: space-between;
//             align-items: center;
//             width: 100%;
//             margin-bottom: 10px;
//             padding: 10px;
//             border-radius: 6px;
//             box-sizing: border-box;
//         }
//         .strip h2 {
//             color: #666;
//             margin-right: 10px;
//         }
//         .color-picker-container {
//             display: flex;
//             align-items: center;
//             margin-left: auto;
//         }
//         .apply-button-container {
//             margin-top: 30px;
//             text-align: center;
//         }
//         .apply-button {
//             background-color: #FF416C;
//             border: none;
//             color: white;
//             padding: 12px 18px;
//             border-radius: 6px;
//             cursor: pointer;
//             width: 100%;
//         }
//         .apply-button:hover {
//             background-color: #FF4B2B;
//         }
//         .checkbox-container {
//             margin-bottom: 20px;
//             text-align: left;
//         }
//     </style>
// </head>
// <body>
//     <div class="container">
//         <h1>LED Control</h1>

//         <!-- Checkbox to toggle one color mode -->
//         <div class="checkbox-container">
//             <label>
//                 <input type="checkbox" id="useOneColor" onchange="toggleOneColor()"> Use one color for both
//             </label>
//         </div>

//         <!-- Strip 1 (MIRROR or MIRROR AND WALL) -->
//         <div class="strip" id="strip1">
//             <h2 id="mirrorLabel">MIRROR</h2>
//             <div class="color-picker-container">
//                 <input type="color" id="color1" class="color-picker" oninput="applyColor(1)">
//             </div>
//         </div>

//         <!-- Strip 2 (CORNER) -->
//         <div class="strip" id="strip2">
//             <h2>CORNER</h2>
//             <div class="color-picker-container">
//                 <input type="color" id="color2" class="color-picker" oninput="applyColor(2)">
//             </div>
//         </div>

//         <div class="apply-button-container">
//             <button class="apply-button" onclick="saveColorsToEEPROM()">Apply</button>
//         </div>
//     </div>

//     <script>
//         // Function to toggle between one color picker and two
//         function toggleOneColor() {
//             var useOneColor = document.getElementById('useOneColor').checked;
//             var mirrorLabel = document.getElementById('mirrorLabel');
//             var strip2 = document.getElementById('strip2');

//             if (useOneColor) {
//                 // Merge MIRROR and CORNER
//                 mirrorLabel.textContent = "MIRROR AND WALL";
//                 strip2.style.display = 'none'; // Hide the second strip
//             } else {
//                 // Show both MIRROR and CORNER separately
//                 mirrorLabel.textContent = "MIRROR";
//                 strip2.style.display = 'flex'; // Show the second strip
//             }
//         }

//         // Function to apply the color to the UI
//         function applyColor(strip) {
//             var color;
//             if (document.getElementById('useOneColor').checked) {
//                 color = document.getElementById('color1').value.substring(1); // Only use the first color picker
//                 var xhr1 = new XMLHttpRequest();
//                 xhr1.open('GET', '/setcolor?strip=1&color=' + color, true);
//                 xhr1.send();

//                 var xhr2 = new XMLHttpRequest();
//                 xhr2.open('GET', '/setcolor?strip=2&color=' + color, true); // Send the same color to strip 2
//                 xhr2.send();
//             } else {
//                 color = document.getElementById('color' + strip).value.substring(1);
//                 var xhr = new XMLHttpRequest();
//                 xhr.open('GET', '/setcolor?strip=' + strip + '&color=' + color, true);
//                 xhr.send();
//             }
//         }

//         // Function to save the colors to EEPROM on the ESP8266
//         function saveColorsToEEPROM() {
//             var color1 = document.getElementById('color1').value.substring(1);
//             var color2 = document.getElementById('color2').value.substring(1);

//             var xhr = new XMLHttpRequest();
//             xhr.open('GET', '/savecolors?color1=' + color1 + '&color2=' + color2, true);
//             xhr.send();
//         }
//     </script>
// </body>
// </html>
// )rawliteral";


// CHSV rgb2hsv(CRGB rgb) {
//     CHSV hsv;
//     unsigned char min, max, delta;

//     min = rgb.r < rgb.g ? rgb.r : rgb.g;
//     min = min < rgb.b ? min : rgb.b;

//     max = rgb.r > rgb.g ? rgb.r : rgb.g;
//     max = max > rgb.b ? max : rgb.b;

//     hsv.v = max;
//     delta = max - min;
//     if (delta < 1) {
//         hsv.s = 0;
//         hsv.h = 0; // undefined, maybe nan?
//         return hsv;
//     }
//     if (max > 0) {
//         hsv.s = (delta * 255) / max;
//     } else {
//         // if max is 0, then r = g = b = 0
//         hsv.s = 0;
//         hsv.h = 0; // undefined, maybe nan?
//         return hsv;
//     }
//     if (rgb.r >= max)
//         hsv.h = (rgb.g - rgb.b) * 255 / delta;        // between yellow & magenta
//     else if (rgb.g >= max)
//         hsv.h = 85 + (rgb.b - rgb.r) * 255 / delta;  // between cyan & yellow
//     else
//         hsv.h = 171 + (rgb.r - rgb.g) * 255 / delta;  // between magenta & cyan

//     return hsv;
// }

// void fillStrip(CRGB* strip, int numberOfLeds, CRGB color) {
//   for(int i = 0; i < numberOfLeds; i++) {
//     strip[i] = color;
//   }
// }

// void handleRoot() {
//   server.send(200, "text/html", html);
// }

// void handleSetColor() {
//   Serial.print("handleSetColor ");
//   int strip = server.arg("strip").toInt();
//   Serial.println(strip);
//   String colorStr = server.arg("color");
//   uint32_t color = strtoul(colorStr.c_str(), NULL, 16);
  
//   CRGB rgbColor = CRGB(color >> 16, (color >> 8) & 0xFF, color & 0xFF);

//   if (strip == 1) {
//     fillStrip(leds_mirror, NUM_LEDS_MIRROR, rgbColor);
//     Serial.print("strip 1: R");
//     Serial.print(rgbColor.r);
//     Serial.print(" G");
//     Serial.print(rgbColor.g);
//     Serial.print(" B");
//     Serial.println(rgbColor.b);
//   } else if (strip == 2) {
//     //fill_solid(leds_wall, NUM_LEDS_WALL, rgbColor);
//     fillStrip(leds_wall, NUM_LEDS_WALL, rgbColor);
//     Serial.print("strip 2: R");
//     Serial.print(rgbColor.r);
//     Serial.print(" G");
//     Serial.print(rgbColor.g);
//     Serial.print(" B");
//     Serial.println(rgbColor.b);
//   }

//   FastLED.show();
//   server.send(200, "text/plain", "OK");
// }

// void debugLED(CRGB *leds, int numLed, CRGB colorToShow, int delayShow) {
//   for(int i = 0; i < NUM_LEDS_WALL; ++i) {
//     leds[i] = CRGB::Black;
//   }
//   FastLED.show();
//   for(int i = 0; i < numLed; ++i) {
//     leds[i] = colorToShow;
//     if(i > 0) {
//       leds[i-1] = CRGB::Black;
//     }
//     if(i == 0) {
//       leds[numLed-1] = CRGB::Black;
//     }
//     FastLED.show();
//     delay(delayShow);
//   }
// }

// void logLed(int index, CRGB color, int number = 5) {
//   for(int i = 0; i < number; ++i) {
//     leds_wall[index] = CRGB::Black;
//     FastLED.show();
//     delay(100);
//     leds_wall[index] = color;
//     FastLED.show();
//     delay(100);
//   }
// }

// void saveToEEPROM() {
//   DEBUG_PRINT("Saving to EEPROM");
//   EEPROM.write(EEPROM_HUE, hue);
//   EEPROM.write(EEPROM_SATURATION, saturation);
//   EEPROM.write(EEPROM_VALUE, value);
//   EEPROM.write(EEPROM_STATE, static_cast<uint8_t>(state));
//   EEPROM.write(EEPROM_INITIALIZED, EEPROM_INIT_VALUE);
//   EEPROM.commit();
//   DEBUG_PRINT("Save complete");
// }

// void loadFromEEPROM() {
//   DEBUG_PRINT("Loading from EEPROM");
//   uint8_t init_check = EEPROM.read(EEPROM_INITIALIZED);
//   DEBUG_PRINT_VAL("Init check value: ", init_check);
  
//   if (init_check != EEPROM_INIT_VALUE) {
//     DEBUG_PRINT("EEPROM not initialized, setting defaults");
//     hue = 0;
//     saturation = MAX_SATURATION;
//     value = INITIAL_BRIGHTNESS;
//     state = BOTH;
//     saveToEEPROM();  // Save these default values
//     DEBUG_PRINT("Default values saved to EEPROM");
//   } else {
//     DEBUG_PRINT("EEPROM initialized, loading values");
//     hue = EEPROM.read(EEPROM_HUE);
//     saturation = EEPROM.read(EEPROM_SATURATION);
//     value = EEPROM.read(EEPROM_VALUE);
//     state = static_cast<LedState>(EEPROM.read(EEPROM_STATE));
    
//     // Ensure loaded values are within valid ranges
//     hue = min(hue, MAX_HUE);
//     saturation = min(saturation, MAX_SATURATION);
//     value = min(value, MAX_VALUE);
//     state = static_cast<LedState>(min(static_cast<uint8_t>(state), static_cast<uint8_t>(WALL_ONLY)));
    
//     DEBUG_PRINT_VAL("Loaded hue: ", hue);
//     DEBUG_PRINT_VAL("Loaded saturation: ", saturation);
//     DEBUG_PRINT_VAL("Loaded value: ", value);
//     DEBUG_PRINT_VAL("Loaded state: ", static_cast<int>(state));
//   }
//   DEBUG_PRINT("Load complete");
// }

// void colorUpdate() {
//   DEBUG_PRINT("Updating color");
//   hue += 5;
//   if (hue >= MAX_HUE) {
//     hue = 0;
//     saturation = (saturation == MAX_SATURATION) ? 0 : MAX_SATURATION;
//   }
//   handleState();
//   DEBUG_PRINT("Color update complete");
// }

// void handleState() {
//   DEBUG_PRINT("Handling state change");
//   CHSV color = CHSV(hue, saturation, value);
//   switch (state) {
//     case WALL_ONLY:
//       DEBUG_PRINT("State: WALL_ONLY");
//       // logLed(50, CRGB::Green);
//       fill_solid(leds_wall, NUM_LEDS_WALL, color);
//       fill_solid(leds_mirror, NUM_LEDS_MIRROR, CRGB::Black);
//       break;
//     case BOTH:
//       DEBUG_PRINT("State: BOTH");
//       // logLed(50, CRGB::Red);
//       fill_solid(leds_wall, NUM_LEDS_WALL, color);
//       fill_solid(leds_mirror, NUM_LEDS_MIRROR, color);
//       break;
//     case MIRROR_ONLY:
//       DEBUG_PRINT("State: MIRROR_ONLY");
//       // logLed(50, CRGB::Blue);
//       fill_solid(leds_wall, NUM_LEDS_WALL, CRGB::Black);
//       fill_solid(leds_mirror, NUM_LEDS_MIRROR, color);
//       break;
//   }
//   FastLED.show();
//   saveToEEPROM();
//   DEBUG_PRINT("State handling complete");
// }

// void handleSaveColors() {
//   String color1 = server.arg("color1");
//   String color2 = server.arg("color2");
  
//   // Перетворення HEX-кольорів у RGB
//   long rgb1 = strtol(color1.c_str(), NULL, 16);
//   long rgb2 = strtol(color2.c_str(), NULL, 16);

//   CHSV convertedColor = rgb2hsv(rgb1);
//   hue = convertedColor.hue;
//   saturation = convertedColor.saturation;
//   value = convertedColor.value;
  
//   // Збереження кольорів в EEPROM
//   saveToEEPROM();
  
//   server.send(200, "text/plain", "Colors saved successfully");
// }

// void setup() {
//   delay(1000);
//   Serial.begin(9600);
//   Serial.println();

//   DEBUG_PRINT("Setting up pins");
//   pinMode(PIN_COLOR_CHANGE_BUTTON, INPUT_PULLUP);
//   DEBUG_PRINT("Pins setup complete");

//   DEBUG_PRINT("Loading settings from EEPROM");
//   loadFromEEPROM();
  
//   // Initialize FastLED
//   FastLED.addLeds<WS2812B, PIN_WALL, GRB>(leds_wall, NUM_LEDS_WALL);
//   FastLED.addLeds<WS2812B, PIN_MIRROR, GRB>(leds_mirror, NUM_LEDS_MIRROR);
//   FastLED.clear();
//   FastLED.show();

//   Serial.print("Configuring access point...");
//   WiFi.softAP(ssid, password);

//   IPAddress myIP = WiFi.softAPIP();
//   Serial.print("AP IP address: ");
//   Serial.println(myIP);

//   // DNS Server for captive portal
//   dnsServer.start(53, "*", myIP);

//   server.on("/", handleRoot);
//   server.on("/setcolor", handleSetColor);
//   server.on("/savecolors", HTTP_GET, handleSaveColors);
//   server.onNotFound(handleRoot);  // Redirect all requests to the root page
//   server.begin();
//   Serial.println("HTTP server started");
//   handleState();
// }

// void loop() {
//   dnsServer.processNextRequest();
//   server.handleClient();

//   static unsigned long lastTickTime = 0;
//   unsigned long currentTime = millis();  
//   if (currentTime - lastTickTime >= TICK_TIME) {
//     if (!digitalRead(PIN_COLOR_CHANGE_BUTTON)) {
//       if (!colorChangeButtonFlag) {
//         delay(50);
//         if(!digitalRead(PIN_COLOR_CHANGE_BUTTON))
//           colorChangeButtonFlag = true;
//         buttonPushTime = currentTime;
//         DEBUG_PRINT("Button pressed");
//       }
//       if (currentTime - buttonPushTime >= LONG_PRESS_TIME) {
//         DEBUG_PRINT("Long press detected");
//         //colorChangeButtonFlag = false;
//         longPressDetected = true;
//         colorUpdate();
//       }
//     } else {
//       if (colorChangeButtonFlag) {
//         colorChangeButtonFlag = false;
//         if(longPressDetected) {
//           longPressDetected = false;
//         } else {
//           DEBUG_PRINT("Short press detected");
//           state = static_cast<LedState>((state + 1) % 3);
//           handleState();
//         }
//       }
//       buttonPushTime = 0;
//     }
    
//     lastTickTime = currentTime;
//   }
// }